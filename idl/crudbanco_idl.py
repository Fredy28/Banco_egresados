# Python stubs generated by omniidl from crudbanco.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


#
# Start of module "CrudApp"
#
__name__ = "CrudApp"
_0_CrudApp = omniORB.openModule("CrudApp", r"crudbanco.idl")
_0_CrudApp__POA = omniORB.openModule("CrudApp__POA", r"crudbanco.idl")


# interface Egresados
_0_CrudApp._d_Egresados = (omniORB.tcInternal.tv_objref, "IDL:CrudApp/Egresados:1.0", "Egresados")
omniORB.typeMapping["IDL:CrudApp/Egresados:1.0"] = _0_CrudApp._d_Egresados
_0_CrudApp.Egresados = omniORB.newEmptyClass()
class Egresados :
    _NP_RepositoryId = _0_CrudApp._d_Egresados[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CrudApp.Egresados = Egresados
_0_CrudApp._tc_Egresados = omniORB.tcInternal.createTypeCode(_0_CrudApp._d_Egresados)
omniORB.registerType(Egresados._NP_RepositoryId, _0_CrudApp._d_Egresados, _0_CrudApp._tc_Egresados)

# Egresados operations and attributes
Egresados._d_create = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Egresados._d_read = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Egresados._d_update = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
Egresados._d_delete = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Egresados._d_list_all = ((), ((omniORB.tcInternal.tv_string,0), ), None)

# Egresados object reference
class _objref_Egresados (CORBA.Object):
    _NP_RepositoryId = Egresados._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CrudApp.Egresados._d_create, args)

    def read(self, *args):
        return self._obj.invoke("read", _0_CrudApp.Egresados._d_read, args)

    def update(self, *args):
        return self._obj.invoke("update", _0_CrudApp.Egresados._d_update, args)

    def delete(self, *args):
        return self._obj.invoke("delete", _0_CrudApp.Egresados._d_delete, args)

    def list_all(self, *args):
        return self._obj.invoke("list_all", _0_CrudApp.Egresados._d_list_all, args)

omniORB.registerObjref(Egresados._NP_RepositoryId, _objref_Egresados)
_0_CrudApp._objref_Egresados = _objref_Egresados
del Egresados, _objref_Egresados

# Egresados skeleton
__name__ = "CrudApp__POA"
class Egresados (PortableServer.Servant):
    _NP_RepositoryId = _0_CrudApp.Egresados._NP_RepositoryId


    _omni_op_d = {"create": _0_CrudApp.Egresados._d_create, "read": _0_CrudApp.Egresados._d_read, "update": _0_CrudApp.Egresados._d_update, "delete": _0_CrudApp.Egresados._d_delete, "list_all": _0_CrudApp.Egresados._d_list_all}

Egresados._omni_skeleton = Egresados
_0_CrudApp__POA.Egresados = Egresados
omniORB.registerSkeleton(Egresados._NP_RepositoryId, Egresados)
del Egresados
__name__ = "CrudApp"

# interface Empresas
_0_CrudApp._d_Empresas = (omniORB.tcInternal.tv_objref, "IDL:CrudApp/Empresas:1.0", "Empresas")
omniORB.typeMapping["IDL:CrudApp/Empresas:1.0"] = _0_CrudApp._d_Empresas
_0_CrudApp.Empresas = omniORB.newEmptyClass()
class Empresas :
    _NP_RepositoryId = _0_CrudApp._d_Empresas[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CrudApp.Empresas = Empresas
_0_CrudApp._tc_Empresas = omniORB.tcInternal.createTypeCode(_0_CrudApp._d_Empresas)
omniORB.registerType(Empresas._NP_RepositoryId, _0_CrudApp._d_Empresas, _0_CrudApp._tc_Empresas)

# Empresas operations and attributes
Empresas._d_create = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Empresas._d_read = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Empresas._d_update = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
Empresas._d_delete = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Empresas._d_list_all = ((), ((omniORB.tcInternal.tv_string,0), ), None)

# Empresas object reference
class _objref_Empresas (CORBA.Object):
    _NP_RepositoryId = Empresas._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CrudApp.Empresas._d_create, args)

    def read(self, *args):
        return self._obj.invoke("read", _0_CrudApp.Empresas._d_read, args)

    def update(self, *args):
        return self._obj.invoke("update", _0_CrudApp.Empresas._d_update, args)

    def delete(self, *args):
        return self._obj.invoke("delete", _0_CrudApp.Empresas._d_delete, args)

    def list_all(self, *args):
        return self._obj.invoke("list_all", _0_CrudApp.Empresas._d_list_all, args)

omniORB.registerObjref(Empresas._NP_RepositoryId, _objref_Empresas)
_0_CrudApp._objref_Empresas = _objref_Empresas
del Empresas, _objref_Empresas

# Empresas skeleton
__name__ = "CrudApp__POA"
class Empresas (PortableServer.Servant):
    _NP_RepositoryId = _0_CrudApp.Empresas._NP_RepositoryId


    _omni_op_d = {"create": _0_CrudApp.Empresas._d_create, "read": _0_CrudApp.Empresas._d_read, "update": _0_CrudApp.Empresas._d_update, "delete": _0_CrudApp.Empresas._d_delete, "list_all": _0_CrudApp.Empresas._d_list_all}

Empresas._omni_skeleton = Empresas
_0_CrudApp__POA.Empresas = Empresas
omniORB.registerSkeleton(Empresas._NP_RepositoryId, Empresas)
del Empresas
__name__ = "CrudApp"

# interface Usuarios
_0_CrudApp._d_Usuarios = (omniORB.tcInternal.tv_objref, "IDL:CrudApp/Usuarios:1.0", "Usuarios")
omniORB.typeMapping["IDL:CrudApp/Usuarios:1.0"] = _0_CrudApp._d_Usuarios
_0_CrudApp.Usuarios = omniORB.newEmptyClass()
class Usuarios :
    _NP_RepositoryId = _0_CrudApp._d_Usuarios[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CrudApp.Usuarios = Usuarios
_0_CrudApp._tc_Usuarios = omniORB.tcInternal.createTypeCode(_0_CrudApp._d_Usuarios)
omniORB.registerType(Usuarios._NP_RepositoryId, _0_CrudApp._d_Usuarios, _0_CrudApp._tc_Usuarios)

# Usuarios operations and attributes
Usuarios._d_register = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Usuarios._d_login = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
Usuarios._d_get_user_by_id = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)

# Usuarios object reference
class _objref_Usuarios (CORBA.Object):
    _NP_RepositoryId = Usuarios._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def register(self, *args):
        return self._obj.invoke("register", _0_CrudApp.Usuarios._d_register, args)

    def login(self, *args):
        return self._obj.invoke("login", _0_CrudApp.Usuarios._d_login, args)

    def get_user_by_id(self, *args):
        return self._obj.invoke("get_user_by_id", _0_CrudApp.Usuarios._d_get_user_by_id, args)

omniORB.registerObjref(Usuarios._NP_RepositoryId, _objref_Usuarios)
_0_CrudApp._objref_Usuarios = _objref_Usuarios
del Usuarios, _objref_Usuarios

# Usuarios skeleton
__name__ = "CrudApp__POA"
class Usuarios (PortableServer.Servant):
    _NP_RepositoryId = _0_CrudApp.Usuarios._NP_RepositoryId


    _omni_op_d = {"register": _0_CrudApp.Usuarios._d_register, "login": _0_CrudApp.Usuarios._d_login, "get_user_by_id": _0_CrudApp.Usuarios._d_get_user_by_id}

Usuarios._omni_skeleton = Usuarios
_0_CrudApp__POA.Usuarios = Usuarios
omniORB.registerSkeleton(Usuarios._NP_RepositoryId, Usuarios)
del Usuarios
__name__ = "CrudApp"

# interface Vacantes
_0_CrudApp._d_Vacantes = (omniORB.tcInternal.tv_objref, "IDL:CrudApp/Vacantes:1.0", "Vacantes")
omniORB.typeMapping["IDL:CrudApp/Vacantes:1.0"] = _0_CrudApp._d_Vacantes
_0_CrudApp.Vacantes = omniORB.newEmptyClass()
class Vacantes :
    _NP_RepositoryId = _0_CrudApp._d_Vacantes[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_CrudApp.Vacantes = Vacantes
_0_CrudApp._tc_Vacantes = omniORB.tcInternal.createTypeCode(_0_CrudApp._d_Vacantes)
omniORB.registerType(Vacantes._NP_RepositoryId, _0_CrudApp._d_Vacantes, _0_CrudApp._tc_Vacantes)

# Vacantes operations and attributes
Vacantes._d_create = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Vacantes._d_read = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Vacantes._d_update = (((omniORB.tcInternal.tv_string,0), (omniORB.tcInternal.tv_string,0)), ((omniORB.tcInternal.tv_string,0), ), None)
Vacantes._d_delete = (((omniORB.tcInternal.tv_string,0), ), ((omniORB.tcInternal.tv_string,0), ), None)
Vacantes._d_list_all = ((), ((omniORB.tcInternal.tv_string,0), ), None)

# Vacantes object reference
class _objref_Vacantes (CORBA.Object):
    _NP_RepositoryId = Vacantes._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def create(self, *args):
        return self._obj.invoke("create", _0_CrudApp.Vacantes._d_create, args)

    def read(self, *args):
        return self._obj.invoke("read", _0_CrudApp.Vacantes._d_read, args)

    def update(self, *args):
        return self._obj.invoke("update", _0_CrudApp.Vacantes._d_update, args)

    def delete(self, *args):
        return self._obj.invoke("delete", _0_CrudApp.Vacantes._d_delete, args)

    def list_all(self, *args):
        return self._obj.invoke("list_all", _0_CrudApp.Vacantes._d_list_all, args)

omniORB.registerObjref(Vacantes._NP_RepositoryId, _objref_Vacantes)
_0_CrudApp._objref_Vacantes = _objref_Vacantes
del Vacantes, _objref_Vacantes

# Vacantes skeleton
__name__ = "CrudApp__POA"
class Vacantes (PortableServer.Servant):
    _NP_RepositoryId = _0_CrudApp.Vacantes._NP_RepositoryId


    _omni_op_d = {"create": _0_CrudApp.Vacantes._d_create, "read": _0_CrudApp.Vacantes._d_read, "update": _0_CrudApp.Vacantes._d_update, "delete": _0_CrudApp.Vacantes._d_delete, "list_all": _0_CrudApp.Vacantes._d_list_all}

Vacantes._omni_skeleton = Vacantes
_0_CrudApp__POA.Vacantes = Vacantes
omniORB.registerSkeleton(Vacantes._NP_RepositoryId, Vacantes)
del Vacantes
__name__ = "CrudApp"

#
# End of module "CrudApp"
#
__name__ = "crudbanco_idl"

_exported_modules = ( "CrudApp", )

# The end.
